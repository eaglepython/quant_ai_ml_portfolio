# -*- coding: utf-8 -*-
"""financial_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qzxioEND2wItVPLVI7xuio2JE5Q6fSP0

# Healthcare Analytics Portfolio

Welcome to the **Healthcare Analytics Portfolio**! This repository showcases projects focused on hospital financial performance, patient outcomes, and staffing optimization. The goal is to leverage data analytics and machine learning to provide insights into hospital efficiency, costs, and resource allocation.

---
## **Projects Overview**

### 1. Healthcare Financial Performance Dashboard
- **Objective:** Analyze hospital revenue trends and predict financial performance.
- **Datasets Used:** `data2.csv`, `data1.xlsx`
- **Methods:**
  - Data merging via fuzzy matching
  - Revenue and cost visualization
  - Predictive modeling using Linear Regression
- **Results:**
  - Successful hospital name alignment for **6 hospitals**.
  - Strong correlation between net and total revenue.
  - Model predicts hospital revenue with high accuracy.
"""

!pip install fuzzywuzzy
!pip install python-Levenshtein

## **Project 1: Healthcare Financial Performance Dashboard**

### **Step 1: Load and Inspect the Data**

import pandas as pd
from fuzzywuzzy import process

# Load datasets
financial_data = pd.read_csv('/content/data2.csv', encoding='latin1')
hospital_data = pd.ExcelFile('/content/data1.xlsx')

# Load relevant sheets from the Excel file
hospital_financials = hospital_data.parse('Downloadable_2023')

# Inspect data
print(financial_data.head())
print(hospital_financials.head())

### **Step 2: Data Cleaning and Preparation**

# Drop missing values
financial_data = financial_data.dropna()
hospital_financials = hospital_financials.dropna()

# Convert revenue columns to numeric
financial_data['hos_net_revenue'] = pd.to_numeric(financial_data['hos_net_revenue'], errors='coerce')
hospital_financials['Total Drug Costs'] = pd.to_numeric(hospital_financials['Total Drug Costs'], errors='coerce')

### **Step 3: Fuzzy Matching for Data Merging**

def match_hospital_name(hospital_name, choices, threshold=80):
    match, score = process.extractOne(hospital_name, choices)
    return match if score >= threshold else None

# Apply fuzzy matching
hospital_financials['Matched_Hospital'] = hospital_financials['Hospital Name'].apply(
    lambda x: match_hospital_name(x, financial_data['health_sys_name'].unique())
)

# Merge datasets
merged_financials = financial_data.merge(hospital_financials, left_on='health_sys_name', right_on='Matched_Hospital', how='inner')

### **Step 4: Financial Performance Analysis (Linear Regression)**


from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

X = merged_financials[['hos_total_revenue']]
y = merged_financials['hos_net_revenue']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Visualizing predictions
plt.figure(figsize=(12, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.xlabel('Actual Net Revenue')
plt.ylabel('Predicted Net Revenue')
plt.title('Actual vs Predicted Net Revenue')
plt.show()

### Step 5: Additional Visualizations

# 1. Distribution of Total Revenue and Net Revenue
plt.figure(figsize=(12, 6))
sns.histplot(merged_financials['hos_total_revenue'], label='Total Revenue', kde=True)
sns.histplot(merged_financials['hos_net_revenue'], label='Net Revenue', kde=True)
plt.title('Distribution of Total Revenue and Net Revenue')
plt.xlabel('Revenue ($)')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# 2. Correlation Matrix
# Replace '.' with NaN and then convert to numeric before calculating correlation
for col in ['hos_total_revenue', 'hos_net_revenue', 'Total Drug Costs', 'Overhead Labor Cost']:
    merged_financials[col] = merged_financials[col].replace('.', np.nan).astype(float)

correlation_matrix = merged_financials[['hos_total_revenue', 'hos_net_revenue', 'Total Drug Costs', 'Overhead Labor Cost']].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Financial Variables')
plt.show()

# 3. Residual Plot
residuals = y_test - y_pred
plt.figure(figsize=(12, 6))
sns.scatterplot(x=y_test, y=residuals, alpha=0.7)
plt.axhline(y=0, color='red', linestyle='--')
plt.title('Residual Plot')
plt.xlabel('Actual Net Revenue')
plt.ylabel('Residuals')
plt.show()