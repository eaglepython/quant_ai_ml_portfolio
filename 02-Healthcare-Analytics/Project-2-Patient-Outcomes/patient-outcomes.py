# -*- coding: utf-8 -*-
"""patient_outcomes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HBA7IYtQuYDuEvfhTvsWOnDCGJjvLHCd

###  Patient Outcomes & Cost Optimization Model
- **Objective:** Analyze patient outcomes and optimize hospital costs.
- **Datasets Used:** `data3.csv`, `data1.xlsx`
- **Methods:**
  - Staffing productivity analysis
  - Random Forest Regression for cost prediction
- **Results:**
  - Successfully matched **425 hospitals**.
  - Higher productivity correlated with lower costs.
  - Model accurately predicts hospital costs based on staffing levels.
"""

## **Project 2: Patient Outcomes & Cost Optimization Model**

!pip install fuzzywuzzy
!pip install python-Levenshtein

!pip install rapidfuzz
!pip install matplotlib
!pip install seaborn

import pandas as pd
from rapidfuzz import fuzz, process
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

## **Project 2: Patient Outcomes & Cost Optimization Model**

### **Step 1: Load and Inspect the Data**
import pandas as pd
from fuzzywuzzy import process

# Load datasets
financial_data = pd.read_csv('/content/sample_data/data2.csv', encoding='latin1')
hospital_data = pd.ExcelFile('/content/sample_data/data1.xlsx')
hospital_financials = hospital_data.parse('Downloadable_2023')

cost_data = pd.read_csv('/content/sample_data/data2.csv', encoding='latin1', delimiter=';')
hospital_financials = hospital_data.parse('Downloadable_2023')

# Convert relevant columns to numeric
hospital_financials['Total Drug Costs'] = pd.to_numeric(hospital_financials['Total Drug Costs'], errors='coerce')

# Inspect data
print(financial_data.head())
print(hospital_financials.head())



### **Step 2: Fuzzy Matching and Merging**

def match_hospital_name(name, hospital_names):
    """
    Fuzzy matches a given name to a list of hospital names.

    Args:
        name (str): The name to match.
        hospital_names (list): A list of hospital names to match against.

    Returns:
        str: The best matching hospital name from the list.
    """
    # Convert name to string if it's not already
    name = str(name)

    # Use rapidfuzz for faster matching
    best_match = process.extractOne(name, hospital_names, scorer=fuzz.token_set_ratio, score_cutoff=80)

    if best_match:
        return best_match[0]  # Return the matched hospital name if confidence is above threshold
    else:
        return None  # Return None if no match or low confidence


### **Step 3: Fuzzy Matching and Merging**

# Convert 'facility_name' and 'Hospital Name' to string type before fuzzy matching
cost_data['facility_name'] = cost_data['facility_name'].astype(str)
hospital_financials['Hospital Name'] = hospital_financials['Hospital Name'].astype(str)

# Pre-process hospital names for faster matching
hospital_names = hospital_financials['Hospital Name'].unique()

cost_data['Matched_Hospital'] = cost_data['facility_name'].apply(
    lambda x: match_hospital_name(x, hospital_names)
)

merged_cost_data = cost_data.merge(hospital_financials, left_on='Matched_Hospital', right_on='Hospital Name', how='inner')

### **Step 4: Cost Prediction Using Random Forest**

X = merged_cost_data[['productive_hours', 'productive_hours_per_adjusted_patient_day']]
y = merged_cost_data['Total Drug Costs']

# Drop rows with NaN values in the target variable ('Total Drug Costs')
merged_cost_data = merged_cost_data.dropna(subset=['Total Drug Costs'])

# Update X and y after dropping NaN values
X = merged_cost_data[['productive_hours', 'productive_hours_per_adjusted_patient_day']]
y = merged_cost_data['Total Drug Costs']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

### **Step 5: Visualization and Interpretation**

# Scatter plot of predicted vs. actual costs
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Total Drug Costs")
plt.ylabel("Predicted Total Drug Costs")
plt.title("Actual vs. Predicted Total Drug Costs")
plt.show()

# Distribution of prediction errors
plt.figure(figsize=(8, 6))
sns.histplot(y_test - y_pred, kde=True)
plt.xlabel("Prediction Error")
plt.ylabel("Frequency")
plt.title("Distribution of Prediction Errors")
plt.show()

# Feature importance plot
feature_importance = model.feature_importances_
features = ['productive_hours', 'productive_hours_per_adjusted_patient_day']
plt.figure(figsize=(8, 6))
sns.barplot(x=features, y=feature_importance)
plt.xlabel("Features")
plt.ylabel("Feature Importance")
plt.title("Feature Importance in Cost Prediction")
plt.show()

